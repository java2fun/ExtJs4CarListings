/*
 * File: app/view/CarListings.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('CarListings.view.CarListings', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.carlistings',

    requires: [
        'CarListings.view.CarListingsViewModel',
        'Ext.grid.Panel',
        'Ext.view.Table',
        'Ext.grid.column.Column',
        'Ext.XTemplate'
    ],

    viewModel: {
        type: 'carlistings'
    },
    frame: true,
    height: 480,
    width: 630,
    title: 'Car Listing.',
    defaultListenerScope: true,

    layout: {
        type: 'vbox',
        align: 'stretch'
    },
    items: [
        {
            xtype: 'gridpanel',
            flex: 1,
            itemId: 'mygridpanel',
            bind: {
                store: '{carDatas}'
            },
            viewConfig: {
                height: 413,
                width: 1034,
                listeners: {
                    select: 'onTableSelect'
                }
            },
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'manufacturer',
                    text: 'Manufacturer'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'model',
                    text: 'Model'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'price',
                    text: 'Price'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'wiki',
                    text: 'Wiki'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'img',
                    text: 'Img'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'quality',
                    text: 'Quality'
                }
            ],
            listeners: {
                select: 'onMygridpanelSelect'
            }
        },
        {
            xtype: 'panel',
            flex: 1,
            itemId: 'detailPanel',
            tpl: [
                '<img src="http://localhost:1841/data/{img}.jpg" style="float: right" />',
                'Manufacturer: {manufacturer}',
                'Model: <a href="{wiki}" target="_blank">{model}</a><br/> Price: {price:usMoney}'
            ],
            title: 'My Panel'
        }
    ],

    onTableSelect: function(dataviewmodel, record, number, eOpts) {
        // grab a reference to the detailPanel via itemId
        // the # in front of the id indicates that we would like to grab a reference by
        var detailPanel = this.child('#detailPanel');
        // update the detailPanel with data
        // this will trigger the tpl to become updates
        detailPanel.update(record.data);
    },

    onMygridpanelSelect: function(rowmodel, record, index, eOpts) {

    }

});